/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.wpilibj.Joystick;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.*;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import java.lang.Object;
import edu.wpi.first.wpilibj.SendableBase;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends TimedRobot {

  Joystick joy = new Joystick(0);
Joystick xbox = new Joystick(1);

  //lower

WPI_TalonSRX leftMaster = new WPI_TalonSRX(1);
WPI_TalonSRX leftSlave = new WPI_TalonSRX(3);
  SpeedControllerGroup rightGroup = new SpeedControllerGroup(leftMaster, leftSlave);
 //chassis.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
  

WPI_TalonSRX rightMaster = new WPI_TalonSRX(2);
WPI_TalonSRX rightSlave = new WPI_TalonSRX(4);
  SpeedControllerGroup leftGroup = new SpeedControllerGroup(leftMaster,leftSlave);

DifferentialDrive lower = new DifferentialDrive(leftGroup,rightGroup);
lower.setInvertedMotor(RobotDrive.leftGroup, true);

//upper

Servo Servo1 = new Servo(1);

Sparx fly = new Sparx(2);

WPI_TalonSRX leftLift = new WPI_TalonSRX(5);
WPI_TalonSRX rightLift = new WPI_TalonSRX(6);
SpeedControllerGroup lift = new SpeedControllerGroup(leftLift,rightLift);
     
  private final Joystick m_stick = new Joystick(0);
  private final Timer m_timer = new Timer();

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {
  }

  /**
   * This function is run once each time the robot enters autonomous mode.
   */
  @Override
  public void autonomousInit() {
    m_timer.reset();
    m_timer.start();
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    // Drive for 2 seconds
    if (m_timer.get() < 2.0) {
      m_robotDrive.arcadeDrive(0.5, 0.0); // drive forwards half speed
    } else {
      m_robotDrive.stopMotor(); // stop robot
    }
  }

  /**
   * This function is called once each time the robot enters teleoperated mode.
   */
  @Override
  public void teleopInit() {
  }

  /**
   * This function is called periodically during teleoperated mode.
   */
  @Override
  public void teleopPeriodic() {
   //lower
   //lower.arcadeDrive(joy.getY(),joy.getX());

   if(xbox.getRawButtpn(0))
    {
     lower.arcadeDrive(Joy.getY()*0.5,joy.getX();
    }
    else
    {
      lower.arcadeDrive(joy.getY(),joy.getX());
    }
   //upper
   
   //lift
   if(xbox.getRawAxis(1)>0.25)
   {
     lift.set(-1);
   }
   else if(xbox.getRawAxis(1)< -0.25)
   {
     lift.set(1);
   }
   else
   {
     lift.set(0);
   }

   //flyWheel
   if()
  }

  /**
   * This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {
  }
}
