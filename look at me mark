/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SolenoidBase;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.SendableBase;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends TimedRobot {
  //right drive
  WPI_TalonSRX rightFront_master = new WPI_TalonSRX(2); //assign TALON chain number
  WPI_TalonSRX rightFront_slave  = new WPI_TalonSRX(4);
  SpeedControllerGroup m_right = new SpeedControllerGroup(rightFront_master, rightFront_slave);
  //left drive
  WPI_TalonSRX leftFront_master = new WPI_TalonSRX(1);
  WPI_TalonSRX leftFront_slave = new WPI_TalonSRX(3);
  SpeedControllerGroup m_left = new SpeedControllerGroup(leftFront_master, leftFront_slave);
    DifferentialDrive m_robotDrive = new DifferentialDrive(m_right , m_left );
  //lift
  WPI_TalonSRX leftLift = new WPI_TalonSRX(5);
  WPI_TalonSRX rightLiftD = new WPI_TalonSRX(6);
 
 
  // tilter 
  WPI_TalonSRX tilt = new WPI_TalonSRX(10);
   
  //ball catcher
  WPI_TalonSRX fly_wheels = new WPI_TalonSRX(9);
  //lifting robot
  Solenoid front_solenoid = new Solenoid(0);
  Solenoid back_solenoid = new Solenoid(1);
 //backup fourbar
  Solenoid lift1 = new Solenoid(2);
  Solenoid lift2 = new Solenoid(3);

  Compressor c = new Compressor(0);
    // joysticks
  Joystick m_stick = new Joystick(0);
  Joystick xbox = new Joystick(1);
// deadband num
  double deadband = 0.25;

  AnalogPotentiometer RightPonte = new AnalogPotentiometer(0,3600,360);
  AnalogPotentiometer LeftPonte = new AnalogPotentiometer(1,3600,360);

  Timer m_timer = new Timer();
 
 Servo gate = new Servo(0);

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {
        //  c.setClosedLoopControl(true);

  }
    
  /**
   * This function is run once each time the robot enters autonomous mode.
   */
  @Override
  public void autonomousInit() {
    m_timer.reset();
    m_timer.start();
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    // Drive for 2 seconds
    
    actTell();
  }

  /**
   * This function is called once each time the robot enters teleoperated mode.
   */
  @Override
  public void teleopInit() {
    
  }

  /**
   * This function is called periodically during teleoperated mode.
   */
  @Override
  public void teleopPeriodic() {
    actTell();
     
  }

  
   // This function is called periodically during test mode.
   
  @Override
  public void testPeriodic() {
  }

  public void actTell() {
      //Xbox input variables   
      double x_left_trigger, x_right_trigger; // triggers on xbox
      double x_leftY;
      boolean x_right_bumper, x_left_bumper; // bumper on xbox
      boolean x_back_button, x_start_button;
      boolean x_Xbutton, x_Ybutton;
     
      boolean x_aButton, x_bButton;

      //Joystick input variables
      double j_Axis0, j_Axis1;  //joystick axes
      boolean j_trigger; //index finger trigger
     
   
    //Get all all the inputs from js and xbox
    
    //Joystick
    j_Axis1 =   (m_stick.getRawAxis(1));
    j_Axis0 =   (m_stick.getRawAxis(0));
    j_trigger = (m_stick.getRawButton(1));
    
    //Xbox
    x_leftY = xbox.getRawAxis(1);
    x_left_trigger  = xbox.getRawAxis(2);
    x_right_trigger = xbox.getRawAxis(3);
    x_right_bumper  = xbox.getRawButton(6);
    x_left_bumper   = xbox.getRawButton(5);
    x_back_button = (xbox.getRawButton(7));
    x_start_button = (xbox.getRawButton(8));
    x_aButton = (xbox.getRawButton(1));
    x_bButton = (xbox.getRawButton(2));
    x_Xbutton = (xbox.getRawButton(3));
    x_Ybutton = (xbox.getRawButton(4));

    int jPOV , xPOV;

    jPOV = m_stick.getPOV();
    xPOV = xbox.getPOV();

    
    //Speed control (if button is not pressed then speed is slower)
    if(jPOV == 90){
      if(j_trigger == true){
      m_right.set(j_Axis1);
    }else{  
      m_right.set(j_Axis1 * 0.75);
  }
}else if(jPOV == 270){
    if(j_trigger == true){
      m_left.set(-j_Axis1);
    }else{  
      m_left.set(-j_Axis1 * 0.75);
    }
  }else{
    if (j_trigger == true) {
      m_robotDrive.arcadeDrive(j_Axis1  , j_Axis0 );
    }else{  
      m_robotDrive.arcadeDrive(j_Axis1 * 0.75 , j_Axis0 * 0.75 );
      }
    }
  
    

     
   //Utilizes trigger output to set fly wheel direction
   //if right is pressed and left is not, that fw is max.
   if (x_right_trigger > deadband && x_left_trigger < deadband){
        fly_wheels.set(1.0);  //setting speed to max.
    }else {
      //if left is pressed and right is not, then fw is -max
      if (x_right_trigger < deadband && x_left_trigger > deadband){
          fly_wheels.set(-1);
      //otherwise, no action on fw.
      }else{
        fly_wheels.set(0);
      }
    }
    
 
  //front solenoid to control pneumatic
  if (x_start_button == true && x_left_bumper == true){
    front_solenoid.set(true);
  }else{
    front_solenoid.set(false);
  }
  //back solenoid to control pneumatic
  if (x_back_button == true && x_left_bumper == true){
      back_solenoid.set(true);
  }else{
      back_solenoid.set(false);
  }
  double low = 0.0;
  double fast = 0.48;
  double slow = 0.26;
  //fast .6 slow .35
  double fastDown = 0.25;
  double slowDown = 0.15;
  //lift
  double rightP , leftP;
  double liftDIF;
  double MAX , MIN;
    rightP = RightPonte.get();
    leftP = LeftPonte.get();
    MAX =3000.0; 
    //3000.0;
    MIN = 500.0;
    //2000.0;
    liftDIF = (rightP - leftP) / leftP;
   


  // if(x_leftY >= 0.5 && !(x_right_bumper) && rightP > MIN) {
  //   rightLiftD.set(-fastDown );
  //   leftLift.set(-fastDown + liftDIF);
  // }
  // else if(x_leftY <= -0.5 && !(x_right_bumper) && rightP < MAX  ){
  //   rightLiftD.set(fast);
  //   leftLift.set(fast + liftDIF);
  // }
  // else{if(x_leftY >= 0.25 && !(x_right_bumper) && rightP > MIN){
  //   rightLiftD.set(-slowDown );
  //   leftLift.set(-slowDown + liftDIF);
  // }
  //   else if(x_leftY <= -0.25 && !(x_right_bumper) && rightP < MAX){
  //   rightLiftD.set(slow );
  //   leftLift.set(slow + liftDIF);
  // }
  //   else {if(x_leftY > deadband && x_right_bumper && rightP > MIN){
  //     rightLiftD.set(-slowDown);
  //     leftLift.set(-slowDown + liftDIF);
  //   }
  //   else if(x_leftY < -0.25 && x_right_bumper  && rightP < MAX){
  //     rightLiftD.set(slow );
  //     leftLift.set(slow + liftDIF);
  //   }
  //   else{
  //     rightLiftD.set(0);
  //     leftLift.set(0 + liftDIF);
  //       }
  //     }
  //   }

   double Ball1 , Ball2 , Ball3;
   double Hatch1, Hatch2 , Hatch3;
   Ball1 = 750;
   Ball2 = 1500;
   Ball3 = 2250;

   Hatch1 = 250;
   Hatch2 = 1000;
   Hatch3 = 1750;
    // leftP
    // rightP

    // up with balls
   if (rightP < Ball1 && xPOV == 90){
    do {
    rightLiftD.set(fast);
    leftLift.set(fast + liftDIF);
      } while (rightP < Ball1 && x_leftY < deadband && x_leftY > -deadband);
   }
   else if (rightP < Ball2 && rightP >= Ball1 && xPOV == 90){
   do {
    rightLiftD.set(fast);
    leftLift.set(fast + liftDIF);
  } while (rightP < Ball2 && x_leftY < deadband && x_leftY > -deadband);
  }else if(rightP < Ball3 && rightP >= Ball2 && xPOV == 90){
  do {
    rightLiftD.set(fast);
    leftLift.set(fast + liftDIF);
  } while (rightP < Ball2 && x_leftY < deadband && x_leftY > -deadband);
 
  // down with balls
  }else if (rightP > Ball1 && rightP <= Ball2 && xPOV == 270){
    do {
      rightLiftD.set(-fastDown);
      leftLift.set(-fastDown + liftDIF);
     }while (rightP > Ball1 && x_leftY < deadband && x_leftY > -deadband);
     //3-2
   }else if (rightP > Ball2 && rightP <= Ball3 && xPOV == 270) { 
    do {
      rightLiftD.set(-fastDown);
      leftLift.set(-fastDown + liftDIF);
     }while (rightP < Ball2 && x_leftY < deadband && x_leftY > -deadband);
   }else if (rightP > Ball3 && xPOV == 270) { 
    do {
      rightLiftD.set(-fastDown);
      leftLift.set(-fastDown + liftDIF);
     }while (rightP < Ball3 && x_leftY < deadband && x_leftY > -deadband);
   }
   //up hatch
   if (rightP < Hatch1 && xPOV == 0){
    do {
    rightLiftD.set(fast);
    leftLift.set(fast + liftDIF);
      } while (rightP < Hatch1 && x_leftY < deadband && x_leftY > -deadband);
   }
   else if (rightP < Hatch2 && rightP >= Hatch1 && xPOV == 0){
   do {
    rightLiftD.set(fast);
    leftLift.set(fast + liftDIF);
  } while (rightP < Hatch2 && x_leftY < deadband && x_leftY > -deadband);
  }else if(rightP < Hatch3 && rightP >= Hatch2 && xPOV == 0){
  do {
    rightLiftD.set(fast);
    leftLift.set(fast + liftDIF);
  } while (rightP < Hatch2 && x_leftY < deadband && x_leftY > -deadband);
 }

else if (rightP > Hatch1 && rightP <= Hatch2 && xPOV == 180){
  do {
    rightLiftD.set(-fastDown);
    leftLift.set(-fastDown + liftDIF);
   }while (rightP > Hatch1 && x_leftY < deadband && x_leftY > -deadband);
   //3-2
 }else if (rightP > Hatch2 && rightP <= Hatch3 && xPOV == 180) { 
  do {
    rightLiftD.set(-fastDown);
    leftLift.set(-fastDown + liftDIF);
   }while (rightP < Hatch2 && x_leftY < deadband && x_leftY > -deadband);
 }else if (rightP > Hatch3 && xPOV == 180) { 
  do {
    rightLiftD.set(-fastDown);
    leftLift.set(-fastDown + liftDIF);
   }while (rightP < Hatch3 && x_leftY < deadband && x_leftY > -deadband);
 }else{
   
   if(x_leftY >= 0.5 && !(x_right_bumper) && rightP > MIN) {
  rightLiftD.set(-fastDown );
  leftLift.set(-fastDown + liftDIF);
}
else if(x_leftY <= -0.5 && !(x_right_bumper) && rightP < MAX  ){
  rightLiftD.set(fast);
  leftLift.set(fast + liftDIF);
}
else{if(x_leftY >= 0.25 && !(x_right_bumper) && rightP > MIN){
  rightLiftD.set(-slowDown );
  leftLift.set(-slowDown + liftDIF);
}
  else if(x_leftY <= -0.25 && !(x_right_bumper) && rightP < MAX){
  rightLiftD.set(slow );
  leftLift.set(slow + liftDIF);
}
  else {if(x_leftY > deadband && x_right_bumper && rightP > MIN){
    rightLiftD.set(-slowDown);
    leftLift.set(-slowDown + liftDIF);
  }
  else if(x_leftY < -0.25 && x_right_bumper  && rightP < MAX){
    rightLiftD.set(slow );
    leftLift.set(slow + liftDIF);
  }
  else{
    rightLiftD.set(0);
    leftLift.set(0 + liftDIF);
      }
    }
  }}

   //tilt
    if(x_aButton == true && x_bButton == false){
      tilt.set(0.75);
    }else if(x_aButton == false && x_bButton == true){
      tilt.set(-0.25);
    }else{
       tilt.set(0);
    }
    //gate
    
    if(x_Ybutton && !(x_Xbutton)){
        gate.setAngle(90);
       }else if(!(x_Ybutton) && (x_Xbutton)){
        gate.setAngle(0);
       }else{}

  }
}
